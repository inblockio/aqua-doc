"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[6078],{3528:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"contribution-guidelines","title":"Contribution Guidelines","description":"Contribution Guide for Rust and JavaScript/TypeScript Aqua Projects","source":"@site/versioned_docs/version-1.2.0/contribution-guidelines.md","sourceDirName":".","slug":"/contribution-guidelines","permalink":"/docs/v2/contribution-guidelines","draft":false,"unlisted":false,"editUrl":"https://github.com/inblockio/versioned_docs/version-1.2.0/contribution-guidelines.md","tags":[],"version":"1.2.0","frontMatter":{"title":"Contribution Guidelines","linkTitle":"Contribution","weight":20,"menu":{"main":{"weight":20}}},"sidebar":"tutorialSidebar","previous":{"title":"Personal Knowledge Container","permalink":"/docs/v2/Components/containers/media-wiki"},"next":{"title":"References","permalink":"/docs/v2/references"}}');var r=i(4848),t=i(8453);const l={title:"Contribution Guidelines",linkTitle:"Contribution",weight:20,menu:{main:{weight:20}}},c=void 0,o={},d=[{value:"Contribution Guide for Rust and JavaScript/TypeScript Aqua Projects",id:"contribution-guide-for-rust-and-javascripttypescript-aqua-projects",level:3},{value:"General Guidelines",id:"general-guidelines",level:2},{value:"Rust Guidelines",id:"rust-guidelines",level:2},{value:"JavaScript/TypeScript Contribution Guidelines",id:"javascripttypescript-contribution-guidelines",level:2}];function a(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"contribution-guide-for-rust-and-javascripttypescript-aqua-projects",children:"Contribution Guide for Rust and JavaScript/TypeScript Aqua Projects"}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(n.p,{children:"This guide outlines the best practices and requirements for contributing to our project. By following these practices, you ensure that the codebase remains consistent, maintainable, and adheres to modern standards."}),"\n",(0,r.jsx)(n.h2,{id:"general-guidelines",children:"General Guidelines"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Code Formatting"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Always use a formatter for consistent code style:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rust"}),": ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"\nUse ",(0,r.jsx)(n.code,{children:"rustfmt"}),". Install it via ",(0,r.jsx)(n.code,{children:"rustup component add rustfmt"})," and run it with ",(0,r.jsx)(n.code,{children:"cargo fmt"}),".",(0,r.jsx)("br",{})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"JavaScript/TypeScript"}),": ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"\nUse ",(0,r.jsx)(n.code,{children:"Prettier"}),".",(0,r.jsx)("br",{})," Ensure it's set up in your editor or run it manually before committing."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"  npx prettier --write .\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Commit Messages"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Write clear and descriptive commit messages."}),"\n",(0,r.jsxs)(n.li,{children:["Use present tense, e.g., ",(0,r.jsx)(n.em,{children:'"Add error handling for API requests"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Code Reviews"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Always submit a pull request for review, even for small changes."}),"\n",(0,r.jsx)(n.li,{children:"Be open to constructive feedback and incorporate suggested changes."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tests Are Essential"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Write unit tests and integration tests where applicable."}),"\n",(0,r.jsx)(n.li,{children:"Ensure all tests pass before submitting a pull request."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Consistency Matters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Follow the existing project style guides."}),"\n",(0,r.jsx)(n.li,{children:"Make sure all code is formatted consistently (tools for this are discussed below)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"rust-guidelines",children:"Rust Guidelines"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Avoid Pointer Manipulation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not use raw pointers (",(0,r.jsx)(n.code,{children:"*const"})," or ",(0,r.jsx)(n.code,{children:"*mut"}),") unless absolutely necessary."]}),"\n",(0,r.jsxs)(n.li,{children:["Stick to safe abstractions like references (",(0,r.jsx)(n.code,{children:"&"}),", ",(0,r.jsx)(n.code,{children:"&mut"}),") or smart pointers (e.g., ",(0,r.jsx)(n.code,{children:"Box"}),", ",(0,r.jsx)(n.code,{children:"Rc"}),", ",(0,r.jsx)(n.code,{children:"Arc"}),")."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Follow Ownership and Borrowing Rules"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure proper ownership and lifetime management to prevent common issues like dangling references."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Precise Functions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Keep functions short and focused. A function should ideally perform one task."}),"\n",(0,r.jsx)(n.li,{children:"Use descriptive function names and avoid long functions (>50 lines is often a warning sign)."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use Idiomatic Rust"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Prefer idiomatic constructs over manual implementations. For example:"}),"\n",(0,r.jsxs)(n.li,{children:["Use iterators and combinators (",(0,r.jsx)(n.code,{children:"map"}),", ",(0,r.jsx)(n.code,{children:"filter"}),") over manual loops where appropriate."]}),"\n",(0,r.jsxs)(n.li,{children:["Use pattern matching for handling ",(0,r.jsx)(n.code,{children:"Option"})," or ",(0,r.jsx)(n.code,{children:"Result"})," types."]}),"\n",(0,r.jsx)(n.li,{children:"Avoid cloning unnecessarily; prefer references when possible."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Follow Rust Clippy Recommendations:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use clippy to identify potential improvements. Run ",(0,r.jsx)(n.code,{children:"cargo clippy --all-targets --all-features -- -D warnings"})," to catch and fix lint issues."]}),"\n",(0,r.jsxs)(n.li,{children:["Install ",(0,r.jsx)(n.code,{children:"clippy"})," using ",(0,r.jsx)(n.code,{children:"rustup component add clippy"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Error Handling:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"Result"})," and ",(0,r.jsx)(n.code,{children:"Option"})," for error handling instead of panicking (",(0,r.jsx)(n.code,{children:"panic!"}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Provide meaningful error messages with thiserror or anyhow for library-level code.(or a string in result containing a reason why the code failed)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Dependencies"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Minimize dependencies. Ensure they are actively maintained and necessary."}),"\n",(0,r.jsx)(n.li,{children:"Use the latest stable versions of dependencies and avoid duplicates."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Documentation"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Document public items with ",(0,r.jsx)(n.code,{children:"///"})," comments."]}),"\n",(0,r.jsx)(n.li,{children:"Include examples for complex functions or types."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)("hr",{}),"\n",(0,r.jsx)(n.h2,{id:"javascripttypescript-contribution-guidelines",children:"JavaScript/TypeScript Contribution Guidelines"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use a Code Formatter:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Prettier for consistent formatting. Run npx prettier --write . before committing changes."}),"\n",(0,r.jsx)(n.li,{children:"Add Prettier configuration if not already present in the project."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Avoid Using any"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not use any unless it's absolutely necessary and temporary. Instead:",(0,r.jsx)("br",{}),"\n\u2003a. Use specific types or TypeScript's utility types (e.g., ",(0,r.jsx)(n.code,{children:"Partial"}),", ",(0,r.jsx)(n.code,{children:"Record"}),", ",(0,r.jsx)(n.code,{children:"Pick"}),", etc.).",(0,r.jsx)("br",{}),"\n\u2003b. Use ",(0,r.jsx)(n.code,{children:"union"})," types (",(0,r.jsx)(n.code,{children:"string | number"}),") or enums for clearly defined options."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pure Functions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Write pure, side-effect-free functions when possible"}),"\n",(0,r.jsx)(n.li,{children:"Use immutable data structures"}),"\n",(0,r.jsx)(n.li,{children:"Return new objects instead of mutating inputs"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Error Handling"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use explicit error types"}),"\n",(0,r.jsx)(n.li,{children:"Leverage discriminated unions for error handling"}),"\n",(0,r.jsxs)(n.li,{children:["Prefer ",(0,r.jsx)(n.code,{children:"Result"}),"-like patterns","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"      type Result<T, E = Error> = \n        | { success: true; value: T }\n        | { success: false; error: E };\n\n      function divide(a: number, b: number): Result<number> {\n        if (b === 0) {\n          return { \n            success: false, \n            error: new Error('Division by zero') \n          };\n        }\n        return { \n          success: true, \n          value: a / b \n        };\n      }\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Performance Considerations"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"const"})," by default or ",(0,r.jsx)(n.code,{children:"let"})]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"Map"})," and ",(0,r.jsx)(n.code,{children:"Set"})," for efficient key-value and unique collections"]}),"\n",(0,r.jsx)(n.li,{children:"Avoid unnecessary object creation"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use JSDoc or TypeDoc for documentation"}),"\n",(0,r.jsx)(n.li,{children:"Include type information in documentation"}),"\n",(0,r.jsxs)(n.li,{children:["Provide examples in documentation comments","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"\n    /**\n      * Calculates the area of a rectangle\n      * @param width - The width of the rectangle\n      * @param height - The height of the rectangle\n      * @returns The calculated area\n      * @example\n      * const area = calculateArea(5, 10);\n      * console.log(area); // 50\n    */\n    function calculateArea(width: number, height: number): number {\n      return width * height;\n    }\n\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>c});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);